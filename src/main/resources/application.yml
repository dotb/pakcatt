pakcatt:
  ## Feature configuration
  application:
    mycall: PAKCAT-1 # Your callsign-SSID. Connections to this callsign will be accepted.
    # The Welcome message seen by users when they connect
    welcome-message: Welcome to PakCatt! Type help to learn more :-)
    default-end-of-line: "\n" # The default EOL sequence used to store content in the database

    # Beacon configuration
    beacon:
      message: PAKCAT-1 on frequency, running PakCatt. Connect to PAKCAT-1 to try it out.
      interval-minutes: 0 # An interval of 0 disables beaconing.
      destination: CQ # The destination address for beacon messages. This is typically 'CQ'.
      channel-identifiers: # List the channels beacon messages should be broadcast on.
        - 'Serial TNC'
        - 'TCP TNC'

    # Tell app configuration
    tell:
      channel-identifiers: # List the channels tell messages should be delivered on.
        - 'Serial TNC'
        - 'TCP TNC'

    # Startup and shutdown messages
    # These messages are broadcast on air when Pakcatt starts up, and just before it shuts down
    startstop:
      send.startup.shutdown.messages: false
      startup.message: PAKCAT-1 back on frequency. Connect to PAKCAT-1 to try it out.
      shutdown.message: PAKCAT-1 going QRT for a software update. Be back soon.

    # Bulletin Board
    board:
      summary-length: 10 # The length of topic and message summary test in listings
      prompt-topic-length: 8 # The length of the topic summary placed in the prompt displayed when in a topic
      default-post-list-length: 10 # The default number of posts presented in a listing within a topic

    scriptable:
      working-dir: ./
      timeout: 60 # Time allowed for scripts to run
      scripts:
        - name: 'Example Date'
          path-connect: 'scripts/example_date_connect.sh'
          path-request: 'scripts/example_date_request.sh'
#       This script is an example that sends messages to stations that beacon from pre-defined locations
#       See location_messages_wrapper.sh and location_messages.kts
#        - name: 'Location messages'
#          path-connect: 'scripts/location_messages_wrapper.sh'
#          path-request: 'scripts/location_messages_wrapper.sh'

  ## TNC Configuration
  tnc:
    ## Serial port / TNC configuration
    serial-connections:
      #- channel-identifier: 'Serial TNC'
      #  port-path: /dev/<YOUR TNC SERIAL PATH>
      #  port-baud: 9600

    ## TCP/IP TNC connections
    tcp-connections:
      - channel-identifier: 'TCP TNC'
        ip-address: 127.0.0.1
        port: 8001

  ## Packet performance parameters
  network.packet:
    frame-size-max: 128 # The maximum number of bytes sent in each AX.25 frame
    frames-per-over: 4 # The maximum number of frames / packets sent in each transmission. 4 seems to be a good value. I wouldn't go more than 6.
    min-tx-pause-seconds: 2 # The minimum amount of time left between transmissions
    delivery-retry-time-seconds: 12 # The time between re-sending frames that have not been acknowledged
    max-delivery-attempts: 6 # The number of times a frame is re-sent if not acknowledged

  ## Configuration for a TCP socket connection that enables interactive sessions over TCP/IP
  network.tcp:
    enabled: false # Setting this to true will open a socket allowing remote connections to access the service. Be careful and consider security.
    port: 7331 # Specify a port that will listen for interactive sessions
    callsign-regex: '[a-zA-Z]+[0-9][a-zA-Z]+-?[0-9]?' # Client callsigns are validated against this regex
    # This welcome message is displayed to the user before they input their callsign
    pre-welcome-message: Welcome to the BBS, running the PakCatt software https://github.com/dotb/pakcatt. This BBS is connected to an RF network and you require a valid amateur radio license to operate it. Please supply your callsign on the next line
    # If a callsign does not match the regex above, display the following message and then disconnect
    callsign-regex-fail-message: Sorry, the callsign you supplied could not be validated. Please check your callsign, contact the administrator of this service, or if you're a robot go away.

  logging:
    # Log conversations into individual files.
    # This makes debugging a conversation a specific remote station easier.
    conversation-log-enabled: false
    conversation-log-path: "/tmp" # The folder in which you want to store conversation log files

spring:
  ## Database configuration
  data.mongodb.database: pakcatt
  #spring.data.mongodb.host: 127.0.0.1
  #spring.data.mongodb.port: 27017

  ## TCP/IP server
  #server.address=127.0.0.1
  server.port: 8080

  freemarker.template-loader-path: classpath:/templates/
  freemarker.suffix: .ftl
  profiles.active: production


## Logging and development parameters
logging:
  pattern.console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%18.18logger{0}]){blue} %clr(${LOG_LEVEL_PATTERN:\t%5p:}) %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
  level.pakcatt: info
